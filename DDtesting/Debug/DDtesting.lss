
DDtesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000d98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000119d  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000395  00000000  00000000  000020b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5d  00000000  00000000  0000244a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f1  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001505  00000000  00000000  000036ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8c 04 	call	0x918	; 0x918 <main>
  88:	0c 94 90 06 	jmp	0xd20	; 0xd20 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <i2c_init>:
	
	if(reading < l) return 0;
	if(reading > u) return 100;
	
	return ((reading - l)/(u-l))*100;
}
  90:	10 92 b9 00 	sts	0x00B9, r1
  94:	88 e4       	ldi	r24, 0x48	; 72
  96:	80 93 b8 00 	sts	0x00B8, r24
  9a:	08 95       	ret

0000009c <i2c_start>:
  9c:	94 ea       	ldi	r25, 0xA4	; 164
  9e:	90 93 bc 00 	sts	0x00BC, r25
  a2:	4f ef       	ldi	r20, 0xFF	; 255
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	ec eb       	ldi	r30, 0xBC	; 188
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	99 23       	and	r25, r25
  b2:	34 f0       	brlt	.+12     	; 0xc0 <i2c_start+0x24>
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	51 09       	sbc	r21, r1
  b8:	61 09       	sbc	r22, r1
  ba:	71 09       	sbc	r23, r1
  bc:	c0 f7       	brcc	.-16     	; 0xae <i2c_start+0x12>
  be:	04 c0       	rjmp	.+8      	; 0xc8 <i2c_start+0x2c>
  c0:	45 2b       	or	r20, r21
  c2:	46 2b       	or	r20, r22
  c4:	47 2b       	or	r20, r23
  c6:	41 f1       	breq	.+80     	; 0x118 <i2c_start+0x7c>
  c8:	90 91 b9 00 	lds	r25, 0x00B9
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	98 30       	cpi	r25, 0x08	; 8
  d0:	11 f0       	breq	.+4      	; 0xd6 <i2c_start+0x3a>
  d2:	90 31       	cpi	r25, 0x10	; 16
  d4:	19 f5       	brne	.+70     	; 0x11c <i2c_start+0x80>
  d6:	80 93 bb 00 	sts	0x00BB, r24
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ec eb       	ldi	r30, 0xBC	; 188
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	20 81       	ld	r18, Z
  ee:	22 23       	and	r18, r18
  f0:	2c f0       	brlt	.+10     	; 0xfc <i2c_start+0x60>
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	a1 09       	sbc	r26, r1
  f6:	b1 09       	sbc	r27, r1
  f8:	c8 f7       	brcc	.-14     	; 0xec <i2c_start+0x50>
  fa:	04 c0       	rjmp	.+8      	; 0x104 <i2c_start+0x68>
  fc:	89 2b       	or	r24, r25
  fe:	8a 2b       	or	r24, r26
 100:	8b 2b       	or	r24, r27
 102:	71 f0       	breq	.+28     	; 0x120 <i2c_start+0x84>
 104:	90 91 b9 00 	lds	r25, 0x00B9
 108:	98 7f       	andi	r25, 0xF8	; 248
 10a:	98 31       	cpi	r25, 0x18	; 24
 10c:	59 f0       	breq	.+22     	; 0x124 <i2c_start+0x88>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 34       	cpi	r25, 0x40	; 64
 112:	49 f4       	brne	.+18     	; 0x126 <i2c_start+0x8a>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	08 95       	ret
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <i2c_stop>:
 128:	84 e9       	ldi	r24, 0x94	; 148
 12a:	80 93 bc 00 	sts	0x00BC, r24
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ec eb       	ldi	r30, 0xBC	; 188
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	20 81       	ld	r18, Z
 138:	24 ff       	sbrs	r18, 4
 13a:	05 c0       	rjmp	.+10     	; 0x146 <i2c_stop+0x1e>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	81 15       	cp	r24, r1
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	92 07       	cpc	r25, r18
 144:	c1 f7       	brne	.-16     	; 0x136 <i2c_stop+0xe>
 146:	08 95       	ret

00000148 <i2c_write>:
 148:	80 93 bb 00 	sts	0x00BB, r24
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	80 93 bc 00 	sts	0x00BC, r24
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	ec eb       	ldi	r30, 0xBC	; 188
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	20 81       	ld	r18, Z
 160:	22 23       	and	r18, r18
 162:	2c f0       	brlt	.+10     	; 0x16e <i2c_write+0x26>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	c8 f7       	brcc	.-14     	; 0x15e <i2c_write+0x16>
 16c:	04 c0       	rjmp	.+8      	; 0x176 <i2c_write+0x2e>
 16e:	89 2b       	or	r24, r25
 170:	8a 2b       	or	r24, r26
 172:	8b 2b       	or	r24, r27
 174:	41 f0       	breq	.+16     	; 0x186 <i2c_write+0x3e>
 176:	90 91 b9 00 	lds	r25, 0x00B9
 17a:	98 7f       	andi	r25, 0xF8	; 248
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	98 32       	cpi	r25, 0x28	; 40
 180:	19 f4       	brne	.+6      	; 0x188 <i2c_write+0x40>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret

0000018a <mpu6050_writeBytes>:
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	66 23       	and	r22, r22
 198:	d1 f0       	breq	.+52     	; 0x1ce <mpu6050_writeBytes+0x44>
 19a:	7a 01       	movw	r14, r20
 19c:	16 2f       	mov	r17, r22
 19e:	c8 2f       	mov	r28, r24
 1a0:	80 ed       	ldi	r24, 0xD0	; 208
 1a2:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_start>
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_write>
 1ac:	e7 01       	movw	r28, r14
 1ae:	6f ef       	ldi	r22, 0xFF	; 255
 1b0:	61 0f       	add	r22, r17
 1b2:	06 2f       	mov	r16, r22
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	0f 5f       	subi	r16, 0xFF	; 255
 1b8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ba:	0e 0d       	add	r16, r14
 1bc:	1f 1d       	adc	r17, r15
 1be:	89 91       	ld	r24, Y+
 1c0:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_write>
 1c4:	c0 17       	cp	r28, r16
 1c6:	d1 07       	cpc	r29, r17
 1c8:	d1 f7       	brne	.-12     	; 0x1be <mpu6050_writeBytes+0x34>
 1ca:	0e 94 94 00 	call	0x128	; 0x128 <i2c_stop>
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <mpu6050_writeByte>:
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	69 83       	std	Y+1, r22	; 0x01
 1e8:	ae 01       	movw	r20, r28
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	0e 94 c5 00 	call	0x18a	; 0x18a <mpu6050_writeBytes>
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <i2c_readAck>:
 1fc:	84 ec       	ldi	r24, 0xC4	; 196
 1fe:	80 93 bc 00 	sts	0x00BC, r24
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	ec eb       	ldi	r30, 0xBC	; 188
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	20 81       	ld	r18, Z
 210:	22 23       	and	r18, r18
 212:	2c f0       	brlt	.+10     	; 0x21e <i2c_readAck+0x22>
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	a1 09       	sbc	r26, r1
 218:	b1 09       	sbc	r27, r1
 21a:	c8 f7       	brcc	.-14     	; 0x20e <i2c_readAck+0x12>
 21c:	04 c0       	rjmp	.+8      	; 0x226 <i2c_readAck+0x2a>
 21e:	89 2b       	or	r24, r25
 220:	8a 2b       	or	r24, r26
 222:	8b 2b       	or	r24, r27
 224:	19 f0       	breq	.+6      	; 0x22c <i2c_readAck+0x30>
 226:	80 91 bb 00 	lds	r24, 0x00BB
 22a:	08 95       	ret
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret

00000230 <i2c_readNak>:
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	a0 e0       	ldi	r26, 0x00	; 0
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	ec eb       	ldi	r30, 0xBC	; 188
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	20 81       	ld	r18, Z
 244:	22 23       	and	r18, r18
 246:	2c f0       	brlt	.+10     	; 0x252 <i2c_readNak+0x22>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	a1 09       	sbc	r26, r1
 24c:	b1 09       	sbc	r27, r1
 24e:	c8 f7       	brcc	.-14     	; 0x242 <i2c_readNak+0x12>
 250:	04 c0       	rjmp	.+8      	; 0x25a <i2c_readNak+0x2a>
 252:	89 2b       	or	r24, r25
 254:	8a 2b       	or	r24, r26
 256:	8b 2b       	or	r24, r27
 258:	19 f0       	breq	.+6      	; 0x260 <i2c_readNak+0x30>
 25a:	80 91 bb 00 	lds	r24, 0x00BB
 25e:	08 95       	ret
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret

00000264 <mpu6050_readBytes>:
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	66 23       	and	r22, r22
 278:	99 f1       	breq	.+102    	; 0x2e0 <mpu6050_readBytes+0x7c>
 27a:	c5 2f       	mov	r28, r21
 27c:	d4 2f       	mov	r29, r20
 27e:	d6 2e       	mov	r13, r22
 280:	18 2f       	mov	r17, r24
 282:	80 ed       	ldi	r24, 0xD0	; 208
 284:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_start>
 288:	81 2f       	mov	r24, r17
 28a:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_write>
 28e:	81 ed       	ldi	r24, 0xD1	; 209
 290:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_start>
 294:	0d 2f       	mov	r16, r29
 296:	1c 2f       	mov	r17, r28
 298:	ee 24       	eor	r14, r14
 29a:	ea 94       	dec	r14
 29c:	ed 0c       	add	r14, r13
 29e:	f1 2c       	mov	r15, r1
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	e8 1a       	sub	r14, r24
 2a4:	f8 0a       	sbc	r15, r24
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	ad 2c       	mov	r10, r13
 2ac:	b1 2c       	mov	r11, r1
 2ae:	e1 e0       	ldi	r30, 0x01	; 1
 2b0:	ae 1a       	sub	r10, r30
 2b2:	b1 08       	sbc	r11, r1
 2b4:	ca 15       	cp	r28, r10
 2b6:	db 05       	cpc	r29, r11
 2b8:	29 f4       	brne	.+10     	; 0x2c4 <mpu6050_readBytes+0x60>
 2ba:	0e 94 18 01 	call	0x230	; 0x230 <i2c_readNak>
 2be:	f8 01       	movw	r30, r16
 2c0:	80 83       	st	Z, r24
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <mpu6050_readBytes+0x68>
 2c4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_readAck>
 2c8:	f8 01       	movw	r30, r16
 2ca:	80 83       	st	Z, r24
 2cc:	21 96       	adiw	r28, 0x01	; 1
 2ce:	0f 5f       	subi	r16, 0xFF	; 255
 2d0:	1f 4f       	sbci	r17, 0xFF	; 255
 2d2:	ce 15       	cp	r28, r14
 2d4:	df 05       	cpc	r29, r15
 2d6:	71 f7       	brne	.-36     	; 0x2b4 <mpu6050_readBytes+0x50>
 2d8:	cd 2d       	mov	r28, r13
 2da:	0e 94 94 00 	call	0x128	; 0x128 <i2c_stop>
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <mpu6050_readBytes+0x7e>
 2e0:	c0 e0       	ldi	r28, 0x00	; 0
 2e2:	8c 2f       	mov	r24, r28
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	bf 90       	pop	r11
 2f4:	af 90       	pop	r10
 2f6:	08 95       	ret

000002f8 <mpu6050_readByte>:
 2f8:	ab 01       	movw	r20, r22
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	0e 94 32 01 	call	0x264	; 0x264 <mpu6050_readBytes>
 300:	08 95       	ret

00000302 <mpu6050_writeBits>:
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	44 23       	and	r20, r20
 316:	89 f1       	breq	.+98     	; 0x37a <mpu6050_writeBits+0x78>
 318:	f2 2e       	mov	r15, r18
 31a:	14 2f       	mov	r17, r20
 31c:	06 2f       	mov	r16, r22
 31e:	e8 2e       	mov	r14, r24
 320:	19 82       	std	Y+1, r1	; 0x01
 322:	be 01       	movw	r22, r28
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mpu6050_readByte>
 32c:	88 23       	and	r24, r24
 32e:	29 f1       	breq	.+74     	; 0x37a <mpu6050_writeBits+0x78>
 330:	40 2f       	mov	r20, r16
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	41 1b       	sub	r20, r17
 336:	51 09       	sbc	r21, r1
 338:	4f 5f       	subi	r20, 0xFF	; 255
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <mpu6050_writeBits+0x44>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	1a 95       	dec	r17
 348:	e2 f7       	brpl	.-8      	; 0x342 <mpu6050_writeBits+0x40>
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	04 2e       	mov	r0, r20
 34e:	02 c0       	rjmp	.+4      	; 0x354 <mpu6050_writeBits+0x52>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <mpu6050_writeBits+0x4e>
 358:	2f 2d       	mov	r18, r15
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <mpu6050_writeBits+0x60>
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	4a 95       	dec	r20
 364:	e2 f7       	brpl	.-8      	; 0x35e <mpu6050_writeBits+0x5c>
 366:	68 2f       	mov	r22, r24
 368:	60 95       	com	r22
 36a:	99 81       	ldd	r25, Y+1	; 0x01
 36c:	69 23       	and	r22, r25
 36e:	82 23       	and	r24, r18
 370:	68 2b       	or	r22, r24
 372:	69 83       	std	Y+1, r22	; 0x01
 374:	8e 2d       	mov	r24, r14
 376:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mpu6050_writeByte>
 37a:	0f 90       	pop	r0
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	08 95       	ret

0000038a <mpu6050_writeBit>:
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	1f 92       	push	r1
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	18 2f       	mov	r17, r24
 39c:	06 2f       	mov	r16, r22
 39e:	f4 2e       	mov	r15, r20
 3a0:	be 01       	movw	r22, r28
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <mpu6050_readByte>
 3aa:	ff 20       	and	r15, r15
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <mpu6050_writeBit+0x3a>
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	b9 01       	movw	r22, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <mpu6050_writeBit+0x30>
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	0a 95       	dec	r16
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <mpu6050_writeBit+0x2c>
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	68 2b       	or	r22, r24
 3c2:	0b c0       	rjmp	.+22     	; 0x3da <mpu6050_writeBit+0x50>
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <mpu6050_writeBit+0x46>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	0a 95       	dec	r16
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <mpu6050_writeBit+0x42>
 3d4:	60 95       	com	r22
 3d6:	99 81       	ldd	r25, Y+1	; 0x01
 3d8:	69 23       	and	r22, r25
 3da:	69 83       	std	Y+1, r22	; 0x01
 3dc:	81 2f       	mov	r24, r17
 3de:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mpu6050_writeByte>
 3e2:	0f 90       	pop	r0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	08 95       	ret

000003f0 <mpu6050_setSleepDisabled>:
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	66 e0       	ldi	r22, 0x06	; 6
 3f4:	8b e6       	ldi	r24, 0x6B	; 107
 3f6:	0e 94 c5 01 	call	0x38a	; 0x38a <mpu6050_writeBit>
 3fa:	08 95       	ret

000003fc <mpu6050_init>:
 3fc:	0e 94 48 00 	call	0x90	; 0x90 <i2c_init>
 400:	8f e3       	ldi	r24, 0x3F	; 63
 402:	9f e1       	ldi	r25, 0x1F	; 31
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <mpu6050_setSleepDisabled>
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	43 e0       	ldi	r20, 0x03	; 3
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	8b e6       	ldi	r24, 0x6B	; 107
 418:	0e 94 81 01 	call	0x302	; 0x302 <mpu6050_writeBits>
 41c:	23 e0       	ldi	r18, 0x03	; 3
 41e:	43 e0       	ldi	r20, 0x03	; 3
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	8a e1       	ldi	r24, 0x1A	; 26
 424:	0e 94 81 01 	call	0x302	; 0x302 <mpu6050_writeBits>
 428:	64 e0       	ldi	r22, 0x04	; 4
 42a:	89 e1       	ldi	r24, 0x19	; 25
 42c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mpu6050_writeByte>
 430:	23 e0       	ldi	r18, 0x03	; 3
 432:	42 e0       	ldi	r20, 0x02	; 2
 434:	64 e0       	ldi	r22, 0x04	; 4
 436:	8b e1       	ldi	r24, 0x1B	; 27
 438:	0e 94 81 01 	call	0x302	; 0x302 <mpu6050_writeBits>
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	42 e0       	ldi	r20, 0x02	; 2
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	8c e1       	ldi	r24, 0x1C	; 28
 444:	0e 94 81 01 	call	0x302	; 0x302 <mpu6050_writeBits>
 448:	08 95       	ret

0000044a <mpu6050_getRawData>:
 44a:	8f 92       	push	r8
 44c:	9f 92       	push	r9
 44e:	af 92       	push	r10
 450:	bf 92       	push	r11
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	4c 01       	movw	r8, r24
 464:	5b 01       	movw	r10, r22
 466:	6a 01       	movw	r12, r20
 468:	e9 01       	movw	r28, r18
 46a:	42 e0       	ldi	r20, 0x02	; 2
 46c:	51 e0       	ldi	r21, 0x01	; 1
 46e:	6e e0       	ldi	r22, 0x0E	; 14
 470:	8b e3       	ldi	r24, 0x3B	; 59
 472:	0e 94 32 01 	call	0x264	; 0x264 <mpu6050_readBytes>
 476:	e2 e0       	ldi	r30, 0x02	; 2
 478:	f1 e0       	ldi	r31, 0x01	; 1
 47a:	20 81       	ld	r18, Z
 47c:	81 81       	ldd	r24, Z+1	; 0x01
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	92 2b       	or	r25, r18
 482:	d4 01       	movw	r26, r8
 484:	8d 93       	st	X+, r24
 486:	9c 93       	st	X, r25
 488:	22 81       	ldd	r18, Z+2	; 0x02
 48a:	83 81       	ldd	r24, Z+3	; 0x03
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	92 2b       	or	r25, r18
 490:	d5 01       	movw	r26, r10
 492:	8d 93       	st	X+, r24
 494:	9c 93       	st	X, r25
 496:	24 81       	ldd	r18, Z+4	; 0x04
 498:	85 81       	ldd	r24, Z+5	; 0x05
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	92 2b       	or	r25, r18
 49e:	d6 01       	movw	r26, r12
 4a0:	8d 93       	st	X+, r24
 4a2:	9c 93       	st	X, r25
 4a4:	20 85       	ldd	r18, Z+8	; 0x08
 4a6:	81 85       	ldd	r24, Z+9	; 0x09
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	92 2b       	or	r25, r18
 4ac:	99 83       	std	Y+1, r25	; 0x01
 4ae:	88 83       	st	Y, r24
 4b0:	22 85       	ldd	r18, Z+10	; 0x0a
 4b2:	83 85       	ldd	r24, Z+11	; 0x0b
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	92 2b       	or	r25, r18
 4b8:	d8 01       	movw	r26, r16
 4ba:	8d 93       	st	X+, r24
 4bc:	9c 93       	st	X, r25
 4be:	24 85       	ldd	r18, Z+12	; 0x0c
 4c0:	85 85       	ldd	r24, Z+13	; 0x0d
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	92 2b       	or	r25, r18
 4c6:	f7 01       	movw	r30, r14
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	df 90       	pop	r13
 4da:	cf 90       	pop	r12
 4dc:	bf 90       	pop	r11
 4de:	af 90       	pop	r10
 4e0:	9f 90       	pop	r9
 4e2:	8f 90       	pop	r8
 4e4:	08 95       	ret

000004e6 <mpu6050_getConvData>:
 4e6:	2f 92       	push	r2
 4e8:	3f 92       	push	r3
 4ea:	4f 92       	push	r4
 4ec:	5f 92       	push	r5
 4ee:	6f 92       	push	r6
 4f0:	7f 92       	push	r7
 4f2:	8f 92       	push	r8
 4f4:	9f 92       	push	r9
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	2c 97       	sbiw	r28, 0x0c	; 12
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	3c 01       	movw	r6, r24
 51c:	4b 01       	movw	r8, r22
 51e:	5a 01       	movw	r10, r20
 520:	69 01       	movw	r12, r18
 522:	28 01       	movw	r4, r16
 524:	17 01       	movw	r2, r14
 526:	1a 82       	std	Y+2, r1	; 0x02
 528:	19 82       	std	Y+1, r1	; 0x01
 52a:	1c 82       	std	Y+4, r1	; 0x04
 52c:	1b 82       	std	Y+3, r1	; 0x03
 52e:	1e 82       	std	Y+6, r1	; 0x06
 530:	1d 82       	std	Y+5, r1	; 0x05
 532:	18 86       	std	Y+8, r1	; 0x08
 534:	1f 82       	std	Y+7, r1	; 0x07
 536:	1a 86       	std	Y+10, r1	; 0x0a
 538:	19 86       	std	Y+9, r1	; 0x09
 53a:	1c 86       	std	Y+12, r1	; 0x0c
 53c:	1b 86       	std	Y+11, r1	; 0x0b
 53e:	ce 01       	movw	r24, r28
 540:	0b 96       	adiw	r24, 0x0b	; 11
 542:	7c 01       	movw	r14, r24
 544:	8e 01       	movw	r16, r28
 546:	07 5f       	subi	r16, 0xF7	; 247
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	9e 01       	movw	r18, r28
 54c:	29 5f       	subi	r18, 0xF9	; 249
 54e:	3f 4f       	sbci	r19, 0xFF	; 255
 550:	ae 01       	movw	r20, r28
 552:	4b 5f       	subi	r20, 0xFB	; 251
 554:	5f 4f       	sbci	r21, 0xFF	; 255
 556:	be 01       	movw	r22, r28
 558:	6d 5f       	subi	r22, 0xFD	; 253
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	0a 97       	sbiw	r24, 0x0a	; 10
 55e:	0e 94 25 02 	call	0x44a	; 0x44a <mpu6050_getRawData>
 562:	69 81       	ldd	r22, Y+1	; 0x01
 564:	7a 81       	ldd	r23, Y+2	; 0x02
 566:	6a 52       	subi	r22, 0x2A	; 42
 568:	7e 4f       	sbci	r23, 0xFE	; 254
 56a:	07 2e       	mov	r0, r23
 56c:	00 0c       	add	r0, r0
 56e:	88 0b       	sbc	r24, r24
 570:	99 0b       	sbc	r25, r25
 572:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	40 e8       	ldi	r20, 0x80	; 128
 57c:	58 e3       	ldi	r21, 0x38	; 56
 57e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 582:	f3 01       	movw	r30, r6
 584:	60 83       	st	Z, r22
 586:	71 83       	std	Z+1, r23	; 0x01
 588:	82 83       	std	Z+2, r24	; 0x02
 58a:	93 83       	std	Z+3, r25	; 0x03
 58c:	6b 81       	ldd	r22, Y+3	; 0x03
 58e:	7c 81       	ldd	r23, Y+4	; 0x04
 590:	67 5f       	subi	r22, 0xF7	; 247
 592:	75 40       	sbci	r23, 0x05	; 5
 594:	07 2e       	mov	r0, r23
 596:	00 0c       	add	r0, r0
 598:	88 0b       	sbc	r24, r24
 59a:	99 0b       	sbc	r25, r25
 59c:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	40 e8       	ldi	r20, 0x80	; 128
 5a6:	58 e3       	ldi	r21, 0x38	; 56
 5a8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 5ac:	f4 01       	movw	r30, r8
 5ae:	60 83       	st	Z, r22
 5b0:	71 83       	std	Z+1, r23	; 0x01
 5b2:	82 83       	std	Z+2, r24	; 0x02
 5b4:	93 83       	std	Z+3, r25	; 0x03
 5b6:	6d 81       	ldd	r22, Y+5	; 0x05
 5b8:	7e 81       	ldd	r23, Y+6	; 0x06
 5ba:	68 59       	subi	r22, 0x98	; 152
 5bc:	73 40       	sbci	r23, 0x03	; 3
 5be:	07 2e       	mov	r0, r23
 5c0:	00 0c       	add	r0, r0
 5c2:	88 0b       	sbc	r24, r24
 5c4:	99 0b       	sbc	r25, r25
 5c6:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e8       	ldi	r20, 0x80	; 128
 5d0:	58 e3       	ldi	r21, 0x38	; 56
 5d2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 5d6:	f5 01       	movw	r30, r10
 5d8:	60 83       	st	Z, r22
 5da:	71 83       	std	Z+1, r23	; 0x01
 5dc:	82 83       	std	Z+2, r24	; 0x02
 5de:	93 83       	std	Z+3, r25	; 0x03
 5e0:	6f 81       	ldd	r22, Y+7	; 0x07
 5e2:	78 85       	ldd	r23, Y+8	; 0x08
 5e4:	68 54       	subi	r22, 0x48	; 72
 5e6:	71 09       	sbc	r23, r1
 5e8:	07 2e       	mov	r0, r23
 5ea:	00 0c       	add	r0, r0
 5ec:	88 0b       	sbc	r24, r24
 5ee:	99 0b       	sbc	r25, r25
 5f0:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
 5f4:	23 e3       	ldi	r18, 0x33	; 51
 5f6:	33 e3       	ldi	r19, 0x33	; 51
 5f8:	43 e8       	ldi	r20, 0x83	; 131
 5fa:	51 e4       	ldi	r21, 0x41	; 65
 5fc:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
 600:	f6 01       	movw	r30, r12
 602:	60 83       	st	Z, r22
 604:	71 83       	std	Z+1, r23	; 0x01
 606:	82 83       	std	Z+2, r24	; 0x02
 608:	93 83       	std	Z+3, r25	; 0x03
 60a:	69 85       	ldd	r22, Y+9	; 0x09
 60c:	7a 85       	ldd	r23, Y+10	; 0x0a
 60e:	61 52       	subi	r22, 0x21	; 33
 610:	71 09       	sbc	r23, r1
 612:	07 2e       	mov	r0, r23
 614:	00 0c       	add	r0, r0
 616:	88 0b       	sbc	r24, r24
 618:	99 0b       	sbc	r25, r25
 61a:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
 61e:	23 e3       	ldi	r18, 0x33	; 51
 620:	33 e3       	ldi	r19, 0x33	; 51
 622:	43 e8       	ldi	r20, 0x83	; 131
 624:	51 e4       	ldi	r21, 0x41	; 65
 626:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
 62a:	f2 01       	movw	r30, r4
 62c:	60 83       	st	Z, r22
 62e:	71 83       	std	Z+1, r23	; 0x01
 630:	82 83       	std	Z+2, r24	; 0x02
 632:	93 83       	std	Z+3, r25	; 0x03
 634:	6b 85       	ldd	r22, Y+11	; 0x0b
 636:	7c 85       	ldd	r23, Y+12	; 0x0c
 638:	62 5f       	subi	r22, 0xF2	; 242
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	07 2e       	mov	r0, r23
 63e:	00 0c       	add	r0, r0
 640:	88 0b       	sbc	r24, r24
 642:	99 0b       	sbc	r25, r25
 644:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatsisf>
 648:	23 e3       	ldi	r18, 0x33	; 51
 64a:	33 e3       	ldi	r19, 0x33	; 51
 64c:	43 e8       	ldi	r20, 0x83	; 131
 64e:	51 e4       	ldi	r21, 0x41	; 65
 650:	0e 94 bd 04 	call	0x97a	; 0x97a <__divsf3>
 654:	f1 01       	movw	r30, r2
 656:	60 83       	st	Z, r22
 658:	71 83       	std	Z+1, r23	; 0x01
 65a:	82 83       	std	Z+2, r24	; 0x02
 65c:	93 83       	std	Z+3, r25	; 0x03
 65e:	2c 96       	adiw	r28, 0x0c	; 12
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	df 90       	pop	r13
 678:	cf 90       	pop	r12
 67a:	bf 90       	pop	r11
 67c:	af 90       	pop	r10
 67e:	9f 90       	pop	r9
 680:	8f 90       	pop	r8
 682:	7f 90       	pop	r7
 684:	6f 90       	pop	r6
 686:	5f 90       	pop	r5
 688:	4f 90       	pop	r4
 68a:	3f 90       	pop	r3
 68c:	2f 90       	pop	r2
 68e:	08 95       	ret

00000690 <uartinit>:

void uartinit (void)
{
	UBRR0H |= (unsigned char) (BAUDRATE>>8);
 690:	e5 ec       	ldi	r30, 0xC5	; 197
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 81       	ld	r24, Z
 696:	80 83       	st	Z, r24
	UBRR0L |= (unsigned char) BAUDRATE;
 698:	e4 ec       	ldi	r30, 0xC4	; 196
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 81       	ld	r24, Z
 69e:	89 61       	ori	r24, 0x19	; 25
 6a0:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0); //enable receiver and transmitter
 6a2:	e1 ec       	ldi	r30, 0xC1	; 193
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	88 61       	ori	r24, 0x18	; 24
 6aa:	80 83       	st	Z, r24
	UCSR0C |= (3<<UCSZ00); // frame set
 6ac:	e2 ec       	ldi	r30, 0xC2	; 194
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	86 60       	ori	r24, 0x06	; 6
 6b4:	80 83       	st	Z, r24
 6b6:	08 95       	ret

000006b8 <uarttransmit>:
}

void uarttransmit (int data)
{
	while (!( UCSR0A & (1<<UDRE0))); // wait till register is free
 6b8:	e0 ec       	ldi	r30, 0xC0	; 192
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	90 81       	ld	r25, Z
 6be:	95 ff       	sbrs	r25, 5
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <uarttransmit+0x4>
	//data = 99;
	UDR0 = data; // load data in the register
 6c2:	80 93 c6 00 	sts	0x00C6, r24
 6c6:	08 95       	ret

000006c8 <uarttransmits>:
	//while (!( UCSR0A & (1<<UDRE0))); // second wait
	
}

void uarttransmits(char * str){
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	ec 01       	movw	r28, r24
	while (*str){
 6ce:	88 81       	ld	r24, Y
 6d0:	88 23       	and	r24, r24
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <uarttransmits+0x1a>
 6d4:	21 96       	adiw	r28, 0x01	; 1
		uarttransmit(*str++);
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <uarttransmit>
	//while (!( UCSR0A & (1<<UDRE0))); // second wait
	
}

void uarttransmits(char * str){
	while (*str){
 6dc:	89 91       	ld	r24, Y+
 6de:	81 11       	cpse	r24, r1
 6e0:	fa cf       	rjmp	.-12     	; 0x6d6 <uarttransmits+0xe>
		uarttransmit(*str++);
	}
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	08 95       	ret

000006e8 <adcinit>:

void adcinit(){
	
	//ADCSRA |= (1<<ADEN); // enabling adc
	ADCSRA |= (1<<ADPS2); // prescaler to 16
 6e8:	ea e7       	ldi	r30, 0x7A	; 122
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	84 60       	ori	r24, 0x04	; 4
 6f0:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR); // left adjust
 6f2:	ec e7       	ldi	r30, 0x7C	; 124
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	80 62       	ori	r24, 0x20	; 32
 6fa:	80 83       	st	Z, r24
	ADMUX &= ~((1<<REFS0)|(1<<REFS1));// reference voltage // refs0 = 0 and refs1 = 0
 6fc:	80 81       	ld	r24, Z
 6fe:	8f 73       	andi	r24, 0x3F	; 63
 700:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
 702:	80 81       	ld	r24, Z
 704:	80 64       	ori	r24, 0x40	; 64
 706:	80 83       	st	Z, r24
 708:	08 95       	ret

0000070a <adcread>:
}

void adcread(int pin){
	
	//while(!ADIF){}
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
 70a:	ec e7       	ldi	r30, 0x7C	; 124
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	20 81       	ld	r18, Z
 710:	20 7f       	andi	r18, 0xF0	; 240
 712:	20 83       	st	Z, r18
	
	switch(pin){
 714:	82 30       	cpi	r24, 0x02	; 2
 716:	91 05       	cpc	r25, r1
 718:	b9 f0       	breq	.+46     	; 0x748 <adcread+0x3e>
 71a:	2c f4       	brge	.+10     	; 0x726 <adcread+0x1c>
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	49 f0       	breq	.+18     	; 0x732 <adcread+0x28>
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	61 f0       	breq	.+24     	; 0x73c <adcread+0x32>
 724:	22 c0       	rjmp	.+68     	; 0x76a <adcread+0x60>
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	91 05       	cpc	r25, r1
 72a:	a1 f0       	breq	.+40     	; 0x754 <adcread+0x4a>
 72c:	04 97       	sbiw	r24, 0x04	; 4
 72e:	c1 f0       	breq	.+48     	; 0x760 <adcread+0x56>
 730:	1c c0       	rjmp	.+56     	; 0x76a <adcread+0x60>
		case 0:	ADMUX |= (0<<MUX0); break; //setting input pin to ADC0
 732:	ec e7       	ldi	r30, 0x7C	; 124
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	80 83       	st	Z, r24
 73a:	17 c0       	rjmp	.+46     	; 0x76a <adcread+0x60>
		case 1: ADMUX |= (1<<MUX0); break;
 73c:	ec e7       	ldi	r30, 0x7C	; 124
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	81 60       	ori	r24, 0x01	; 1
 744:	80 83       	st	Z, r24
 746:	11 c0       	rjmp	.+34     	; 0x76a <adcread+0x60>
		case 2: ADMUX |= (0<<MUX0)|(1<<MUX1); break;
 748:	ec e7       	ldi	r30, 0x7C	; 124
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	82 60       	ori	r24, 0x02	; 2
 750:	80 83       	st	Z, r24
 752:	0b c0       	rjmp	.+22     	; 0x76a <adcread+0x60>
		case 3: ADMUX |= (1<<MUX0)|(1<<MUX1);
 754:	ec e7       	ldi	r30, 0x7C	; 124
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	83 60       	ori	r24, 0x03	; 3
 75c:	80 83       	st	Z, r24
					//PORTB &= ~((1<<PINB3)|(1<<PINB4)|(1<<PINB5));
					break;
 75e:	05 c0       	rjmp	.+10     	; 0x76a <adcread+0x60>
		case 4: ADMUX |= (1<<MUX0)|(1<<MUX1);
 760:	ec e7       	ldi	r30, 0x7C	; 124
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	83 60       	ori	r24, 0x03	; 3
 768:	80 83       	st	Z, r24
					//PORTB &= ~((1<<PINB3)|(1<<PINB4)|(1<<PINB5));
					//PORTB |= (1<<PINB3);
					break;
		default: break;
	}
	ADCSRA |= (1<<ADEN); // enabling adc everytime read is done
 76a:	ea e7       	ldi	r30, 0x7A	; 122
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	80 68       	ori	r24, 0x80	; 128
 772:	80 83       	st	Z, r24
	PRR &= ~(1<<PRADC); // disabling power save mode to start //pradc = 0
 774:	a4 e6       	ldi	r26, 0x64	; 100
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	8c 91       	ld	r24, X
 77a:	8e 7f       	andi	r24, 0xFE	; 254
 77c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);// starting conversion
 77e:	80 81       	ld	r24, Z
 780:	80 64       	ori	r24, 0x40	; 64
 782:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){};
 784:	80 81       	ld	r24, Z
 786:	86 fd       	sbrc	r24, 6
 788:	fd cf       	rjmp	.-6      	; 0x784 <adcread+0x7a>
}
 78a:	08 95       	ret

0000078c <adctransmit>:

void adctransmit(int i){
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
 794:	2a 97       	sbiw	r28, 0x0a	; 10
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	f8 94       	cli
 79a:	de bf       	out	0x3e, r29	; 62
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	cd bf       	out	0x3d, r28	; 61
	while(ADCSRA & (1<<ADSC)){};
 7a0:	ea e7       	ldi	r30, 0x7A	; 122
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	86 fd       	sbrc	r24, 6
 7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <adctransmit+0x18>
	int p = ADCH;
 7aa:	80 91 79 00 	lds	r24, 0x0079
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7ae:	4a e0       	ldi	r20, 0x0A	; 10
 7b0:	be 01       	movw	r22, r28
 7b2:	6f 5f       	subi	r22, 0xFF	; 255
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 2a 06 	call	0xc54	; 0xc54 <__itoa_ncheck>
	//int q = scaled(p,i);
	char itmp[10];
	itoa(p, itmp, 10); uarttransmits(itmp);
 7bc:	ce 01       	movw	r24, r28
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uarttransmits>
}
 7c4:	2a 96       	adiw	r28, 0x0a	; 10
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	f8 94       	cli
 7ca:	de bf       	out	0x3e, r29	; 62
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	cd bf       	out	0x3d, r28	; 61
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

000007d6 <mpu>:


void mpu(int mode) {
 7d6:	ef 92       	push	r14
 7d8:	ff 92       	push	r15
 7da:	0f 93       	push	r16
 7dc:	1f 93       	push	r17
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
 7e6:	ae 97       	sbiw	r28, 0x2e	; 46
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61
	mpumode = mode;
 7f2:	90 93 01 01 	sts	0x0101, r25
 7f6:	80 93 00 01 	sts	0x0100, r24
	
	#if MPU6050_GETATTITUDE == 0
    int16_t ax = 0;
 7fa:	1a 82       	std	Y+2, r1	; 0x02
 7fc:	19 82       	std	Y+1, r1	; 0x01
    int16_t ay = 0;
 7fe:	1c 82       	std	Y+4, r1	; 0x04
 800:	1b 82       	std	Y+3, r1	; 0x03
    int16_t az = 0;
 802:	1e 82       	std	Y+6, r1	; 0x06
 804:	1d 82       	std	Y+5, r1	; 0x05
    int16_t gx = 0;
 806:	18 86       	std	Y+8, r1	; 0x08
 808:	1f 82       	std	Y+7, r1	; 0x07
    int16_t gy = 0;
 80a:	1a 86       	std	Y+10, r1	; 0x0a
 80c:	19 86       	std	Y+9, r1	; 0x09
    int16_t gz = 0;
 80e:	1c 86       	std	Y+12, r1	; 0x0c
 810:	1b 86       	std	Y+11, r1	; 0x0b
    double axg = 0;
 812:	1d 86       	std	Y+13, r1	; 0x0d
 814:	1e 86       	std	Y+14, r1	; 0x0e
 816:	1f 86       	std	Y+15, r1	; 0x0f
 818:	18 8a       	std	Y+16, r1	; 0x10
    double ayg = 0;
 81a:	19 8a       	std	Y+17, r1	; 0x11
 81c:	1a 8a       	std	Y+18, r1	; 0x12
 81e:	1b 8a       	std	Y+19, r1	; 0x13
 820:	1c 8a       	std	Y+20, r1	; 0x14
    double azg = 0;
 822:	1d 8a       	std	Y+21, r1	; 0x15
 824:	1e 8a       	std	Y+22, r1	; 0x16
 826:	1f 8a       	std	Y+23, r1	; 0x17
 828:	18 8e       	std	Y+24, r1	; 0x18
    double gxds = 0;
 82a:	19 8e       	std	Y+25, r1	; 0x19
 82c:	1a 8e       	std	Y+26, r1	; 0x1a
 82e:	1b 8e       	std	Y+27, r1	; 0x1b
 830:	1c 8e       	std	Y+28, r1	; 0x1c
    double gyds = 0;
 832:	1d 8e       	std	Y+29, r1	; 0x1d
 834:	1e 8e       	std	Y+30, r1	; 0x1e
 836:	1f 8e       	std	Y+31, r1	; 0x1f
 838:	18 a2       	std	Y+32, r1	; 0x20
    double gzds = 0;
 83a:	19 a2       	std	Y+33, r1	; 0x21
 83c:	1a a2       	std	Y+34, r1	; 0x22
 83e:	1b a2       	std	Y+35, r1	; 0x23
 840:	1c a2       	std	Y+36, r1	; 0x24

    //init uart
	//uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
	
	//init interrupt
	sei();
 842:	78 94       	sei

	//init mpu6050
	mpu6050_init();
 844:	0e 94 fe 01 	call	0x3fc	; 0x3fc <mpu6050_init>
	//mpu6050_dmpEnable();
	//_delay_ms(10);
	#endif

	#if MPU6050_GETATTITUDE == 0
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
 848:	ce 01       	movw	r24, r28
 84a:	0b 96       	adiw	r24, 0x0b	; 11
 84c:	7c 01       	movw	r14, r24
 84e:	8e 01       	movw	r16, r28
 850:	07 5f       	subi	r16, 0xF7	; 247
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	9e 01       	movw	r18, r28
 856:	29 5f       	subi	r18, 0xF9	; 249
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	ae 01       	movw	r20, r28
 85c:	4b 5f       	subi	r20, 0xFB	; 251
 85e:	5f 4f       	sbci	r21, 0xFF	; 255
 860:	be 01       	movw	r22, r28
 862:	6d 5f       	subi	r22, 0xFD	; 253
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	0a 97       	sbiw	r24, 0x0a	; 10
 868:	0e 94 25 02 	call	0x44a	; 0x44a <mpu6050_getRawData>
	mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
 86c:	ce 01       	movw	r24, r28
 86e:	81 96       	adiw	r24, 0x21	; 33
 870:	7c 01       	movw	r14, r24
 872:	0c 5e       	subi	r16, 0xEC	; 236
 874:	1f 4f       	sbci	r17, 0xFF	; 255
 876:	9e 01       	movw	r18, r28
 878:	27 5e       	subi	r18, 0xE7	; 231
 87a:	3f 4f       	sbci	r19, 0xFF	; 255
 87c:	ae 01       	movw	r20, r28
 87e:	4b 5e       	subi	r20, 0xEB	; 235
 880:	5f 4f       	sbci	r21, 0xFF	; 255
 882:	be 01       	movw	r22, r28
 884:	6f 5e       	subi	r22, 0xEF	; 239
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	44 97       	sbiw	r24, 0x14	; 20
 88a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mpu6050_getConvData>

	#if MPU6050_GETATTITUDE == 0
	char itmp[10];
			
	//uarttransmit(ax);
	ltoa(ax, itmp, 10); uarttransmits(itmp);
 88e:	69 81       	ldd	r22, Y+1	; 0x01
 890:	7a 81       	ldd	r23, Y+2	; 0x02
 892:	07 2e       	mov	r0, r23
 894:	00 0c       	add	r0, r0
 896:	88 0b       	sbc	r24, r24
 898:	99 0b       	sbc	r25, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 89a:	2a e0       	ldi	r18, 0x0A	; 10
 89c:	ae 01       	movw	r20, r28
 89e:	4b 5d       	subi	r20, 0xDB	; 219
 8a0:	5f 4f       	sbci	r21, 0xFF	; 255
 8a2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__ltoa_ncheck>
 8a6:	ce 01       	movw	r24, r28
 8a8:	85 96       	adiw	r24, 0x25	; 37
 8aa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uarttransmits>
	uarttransmit('+');
 8ae:	8b e2       	ldi	r24, 0x2B	; 43
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <uarttransmit>
	ltoa(ay, itmp, 10); uarttransmits(itmp);
 8b6:	6b 81       	ldd	r22, Y+3	; 0x03
 8b8:	7c 81       	ldd	r23, Y+4	; 0x04
 8ba:	07 2e       	mov	r0, r23
 8bc:	00 0c       	add	r0, r0
 8be:	88 0b       	sbc	r24, r24
 8c0:	99 0b       	sbc	r25, r25
 8c2:	2a e0       	ldi	r18, 0x0A	; 10
 8c4:	ae 01       	movw	r20, r28
 8c6:	4b 5d       	subi	r20, 0xDB	; 219
 8c8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ca:	0e 94 35 06 	call	0xc6a	; 0xc6a <__ltoa_ncheck>
 8ce:	ce 01       	movw	r24, r28
 8d0:	85 96       	adiw	r24, 0x25	; 37
 8d2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uarttransmits>
	uarttransmit('+');
 8d6:	8b e2       	ldi	r24, 0x2B	; 43
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <uarttransmit>
	ltoa(az, itmp, 10); uarttransmits(itmp);
 8de:	6d 81       	ldd	r22, Y+5	; 0x05
 8e0:	7e 81       	ldd	r23, Y+6	; 0x06
 8e2:	07 2e       	mov	r0, r23
 8e4:	00 0c       	add	r0, r0
 8e6:	88 0b       	sbc	r24, r24
 8e8:	99 0b       	sbc	r25, r25
 8ea:	2a e0       	ldi	r18, 0x0A	; 10
 8ec:	ae 01       	movw	r20, r28
 8ee:	4b 5d       	subi	r20, 0xDB	; 219
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__ltoa_ncheck>
 8f6:	ce 01       	movw	r24, r28
 8f8:	85 96       	adiw	r24, 0x25	; 37
 8fa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uarttransmits>
	uarttransmit('+');
	dtostrf(yaw,50,6,ptr);
	uarttransmits(ptr);
	
	#endif
}
 8fe:	ae 96       	adiw	r28, 0x2e	; 46
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	1f 91       	pop	r17
 910:	0f 91       	pop	r16
 912:	ff 90       	pop	r15
 914:	ef 90       	pop	r14
 916:	08 95       	ret

00000918 <main>:

int main(void){
	uartinit();
 918:	0e 94 48 03 	call	0x690	; 0x690 <uartinit>
	adcinit();
 91c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <adcinit>
	
	//sei();

	DDRB |= (1<<PINB3)|(1<<PINB4)|(1<<PINB5); // selection pins MUX sensors 3 and 4
 920:	84 b1       	in	r24, 0x04	; 4
 922:	88 63       	ori	r24, 0x38	; 56
 924:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PINB3)|(1<<PINB4)|(1<<PINB5));
 926:	85 b1       	in	r24, 0x05	; 5
 928:	87 7c       	andi	r24, 0xC7	; 199
 92a:	85 b9       	out	0x05, r24	; 5
	//PORTB |= (1<<PINB3);
		
	while(1){
		uarttransmit('#');
		for (int i=0; i<4; i++)
 92c:	00 e0       	ldi	r16, 0x00	; 0
 92e:	10 e0       	ldi	r17, 0x00	; 0
	DDRB |= (1<<PINB3)|(1<<PINB4)|(1<<PINB5); // selection pins MUX sensors 3 and 4
	PORTB &= ~((1<<PINB3)|(1<<PINB4)|(1<<PINB5));
	//PORTB |= (1<<PINB3);
		
	while(1){
		uarttransmit('#');
 930:	83 e2       	ldi	r24, 0x23	; 35
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <uarttransmit>
		for (int i=0; i<4; i++)
 938:	c0 2f       	mov	r28, r16
 93a:	d1 2f       	mov	r29, r17
		{
			adcread(i); adctransmit(i);
 93c:	ce 01       	movw	r24, r28
 93e:	0e 94 85 03 	call	0x70a	; 0x70a <adcread>
 942:	ce 01       	movw	r24, r28
 944:	0e 94 c6 03 	call	0x78c	; 0x78c <adctransmit>
			uarttransmit('+');
 948:	8b e2       	ldi	r24, 0x2B	; 43
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <uarttransmit>
	PORTB &= ~((1<<PINB3)|(1<<PINB4)|(1<<PINB5));
	//PORTB |= (1<<PINB3);
		
	while(1){
		uarttransmit('#');
		for (int i=0; i<4; i++)
 950:	21 96       	adiw	r28, 0x01	; 1
 952:	c4 30       	cpi	r28, 0x04	; 4
 954:	d1 05       	cpc	r29, r1
 956:	91 f7       	brne	.-28     	; 0x93c <main+0x24>
		{
			adcread(i); adctransmit(i);
			uarttransmit('+');
		}
		
		mpu(0);
 958:	80 2f       	mov	r24, r16
 95a:	91 2f       	mov	r25, r17
 95c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <mpu>
		uarttransmit('+');
 960:	8b e2       	ldi	r24, 0x2B	; 43
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <uarttransmit>
		mpu(1);
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <mpu>
		uarttransmit('~');
 970:	8e e7       	ldi	r24, 0x7E	; 126
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <uarttransmit>
	}
 978:	db cf       	rjmp	.-74     	; 0x930 <main+0x18>

0000097a <__divsf3>:
 97a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__divsf3x>
 97e:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
 982:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
 986:	58 f0       	brcs	.+22     	; 0x99e <__divsf3+0x24>
 988:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
 98c:	40 f0       	brcs	.+16     	; 0x99e <__divsf3+0x24>
 98e:	29 f4       	brne	.+10     	; 0x99a <__divsf3+0x20>
 990:	5f 3f       	cpi	r21, 0xFF	; 255
 992:	29 f0       	breq	.+10     	; 0x99e <__divsf3+0x24>
 994:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 998:	51 11       	cpse	r21, r1
 99a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 99e:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>

000009a2 <__divsf3x>:
 9a2:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
 9a6:	68 f3       	brcs	.-38     	; 0x982 <__divsf3+0x8>

000009a8 <__divsf3_pse>:
 9a8:	99 23       	and	r25, r25
 9aa:	b1 f3       	breq	.-20     	; 0x998 <__divsf3+0x1e>
 9ac:	55 23       	and	r21, r21
 9ae:	91 f3       	breq	.-28     	; 0x994 <__divsf3+0x1a>
 9b0:	95 1b       	sub	r25, r21
 9b2:	55 0b       	sbc	r21, r21
 9b4:	bb 27       	eor	r27, r27
 9b6:	aa 27       	eor	r26, r26
 9b8:	62 17       	cp	r22, r18
 9ba:	73 07       	cpc	r23, r19
 9bc:	84 07       	cpc	r24, r20
 9be:	38 f0       	brcs	.+14     	; 0x9ce <__divsf3_pse+0x26>
 9c0:	9f 5f       	subi	r25, 0xFF	; 255
 9c2:	5f 4f       	sbci	r21, 0xFF	; 255
 9c4:	22 0f       	add	r18, r18
 9c6:	33 1f       	adc	r19, r19
 9c8:	44 1f       	adc	r20, r20
 9ca:	aa 1f       	adc	r26, r26
 9cc:	a9 f3       	breq	.-22     	; 0x9b8 <__divsf3_pse+0x10>
 9ce:	35 d0       	rcall	.+106    	; 0xa3a <__divsf3_pse+0x92>
 9d0:	0e 2e       	mov	r0, r30
 9d2:	3a f0       	brmi	.+14     	; 0x9e2 <__divsf3_pse+0x3a>
 9d4:	e0 e8       	ldi	r30, 0x80	; 128
 9d6:	32 d0       	rcall	.+100    	; 0xa3c <__divsf3_pse+0x94>
 9d8:	91 50       	subi	r25, 0x01	; 1
 9da:	50 40       	sbci	r21, 0x00	; 0
 9dc:	e6 95       	lsr	r30
 9de:	00 1c       	adc	r0, r0
 9e0:	ca f7       	brpl	.-14     	; 0x9d4 <__divsf3_pse+0x2c>
 9e2:	2b d0       	rcall	.+86     	; 0xa3a <__divsf3_pse+0x92>
 9e4:	fe 2f       	mov	r31, r30
 9e6:	29 d0       	rcall	.+82     	; 0xa3a <__divsf3_pse+0x92>
 9e8:	66 0f       	add	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	bb 1f       	adc	r27, r27
 9f0:	26 17       	cp	r18, r22
 9f2:	37 07       	cpc	r19, r23
 9f4:	48 07       	cpc	r20, r24
 9f6:	ab 07       	cpc	r26, r27
 9f8:	b0 e8       	ldi	r27, 0x80	; 128
 9fa:	09 f0       	breq	.+2      	; 0x9fe <__divsf3_pse+0x56>
 9fc:	bb 0b       	sbc	r27, r27
 9fe:	80 2d       	mov	r24, r0
 a00:	bf 01       	movw	r22, r30
 a02:	ff 27       	eor	r31, r31
 a04:	93 58       	subi	r25, 0x83	; 131
 a06:	5f 4f       	sbci	r21, 0xFF	; 255
 a08:	3a f0       	brmi	.+14     	; 0xa18 <__divsf3_pse+0x70>
 a0a:	9e 3f       	cpi	r25, 0xFE	; 254
 a0c:	51 05       	cpc	r21, r1
 a0e:	78 f0       	brcs	.+30     	; 0xa2e <__divsf3_pse+0x86>
 a10:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 a14:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 a18:	5f 3f       	cpi	r21, 0xFF	; 255
 a1a:	e4 f3       	brlt	.-8      	; 0xa14 <__divsf3_pse+0x6c>
 a1c:	98 3e       	cpi	r25, 0xE8	; 232
 a1e:	d4 f3       	brlt	.-12     	; 0xa14 <__divsf3_pse+0x6c>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f7 95       	ror	r31
 a2a:	9f 5f       	subi	r25, 0xFF	; 255
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__divsf3_pse+0x78>
 a2e:	88 0f       	add	r24, r24
 a30:	91 1d       	adc	r25, r1
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret
 a3a:	e1 e0       	ldi	r30, 0x01	; 1
 a3c:	66 0f       	add	r22, r22
 a3e:	77 1f       	adc	r23, r23
 a40:	88 1f       	adc	r24, r24
 a42:	bb 1f       	adc	r27, r27
 a44:	62 17       	cp	r22, r18
 a46:	73 07       	cpc	r23, r19
 a48:	84 07       	cpc	r24, r20
 a4a:	ba 07       	cpc	r27, r26
 a4c:	20 f0       	brcs	.+8      	; 0xa56 <__divsf3_pse+0xae>
 a4e:	62 1b       	sub	r22, r18
 a50:	73 0b       	sbc	r23, r19
 a52:	84 0b       	sbc	r24, r20
 a54:	ba 0b       	sbc	r27, r26
 a56:	ee 1f       	adc	r30, r30
 a58:	88 f7       	brcc	.-30     	; 0xa3c <__divsf3_pse+0x94>
 a5a:	e0 95       	com	r30
 a5c:	08 95       	ret

00000a5e <__floatunsisf>:
 a5e:	e8 94       	clt
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__floatsisf+0x12>

00000a62 <__floatsisf>:
 a62:	97 fb       	bst	r25, 7
 a64:	3e f4       	brtc	.+14     	; 0xa74 <__floatsisf+0x12>
 a66:	90 95       	com	r25
 a68:	80 95       	com	r24
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	99 23       	and	r25, r25
 a76:	a9 f0       	breq	.+42     	; 0xaa2 <__floatsisf+0x40>
 a78:	f9 2f       	mov	r31, r25
 a7a:	96 e9       	ldi	r25, 0x96	; 150
 a7c:	bb 27       	eor	r27, r27
 a7e:	93 95       	inc	r25
 a80:	f6 95       	lsr	r31
 a82:	87 95       	ror	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f1 11       	cpse	r31, r1
 a8c:	f8 cf       	rjmp	.-16     	; 0xa7e <__floatsisf+0x1c>
 a8e:	fa f4       	brpl	.+62     	; 0xace <__floatsisf+0x6c>
 a90:	bb 0f       	add	r27, r27
 a92:	11 f4       	brne	.+4      	; 0xa98 <__floatsisf+0x36>
 a94:	60 ff       	sbrs	r22, 0
 a96:	1b c0       	rjmp	.+54     	; 0xace <__floatsisf+0x6c>
 a98:	6f 5f       	subi	r22, 0xFF	; 255
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	16 c0       	rjmp	.+44     	; 0xace <__floatsisf+0x6c>
 aa2:	88 23       	and	r24, r24
 aa4:	11 f0       	breq	.+4      	; 0xaaa <__floatsisf+0x48>
 aa6:	96 e9       	ldi	r25, 0x96	; 150
 aa8:	11 c0       	rjmp	.+34     	; 0xacc <__floatsisf+0x6a>
 aaa:	77 23       	and	r23, r23
 aac:	21 f0       	breq	.+8      	; 0xab6 <__floatsisf+0x54>
 aae:	9e e8       	ldi	r25, 0x8E	; 142
 ab0:	87 2f       	mov	r24, r23
 ab2:	76 2f       	mov	r23, r22
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__floatsisf+0x5e>
 ab6:	66 23       	and	r22, r22
 ab8:	71 f0       	breq	.+28     	; 0xad6 <__floatsisf+0x74>
 aba:	96 e8       	ldi	r25, 0x86	; 134
 abc:	86 2f       	mov	r24, r22
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	2a f0       	brmi	.+10     	; 0xace <__floatsisf+0x6c>
 ac4:	9a 95       	dec	r25
 ac6:	66 0f       	add	r22, r22
 ac8:	77 1f       	adc	r23, r23
 aca:	88 1f       	adc	r24, r24
 acc:	da f7       	brpl	.-10     	; 0xac4 <__floatsisf+0x62>
 ace:	88 0f       	add	r24, r24
 ad0:	96 95       	lsr	r25
 ad2:	87 95       	ror	r24
 ad4:	97 f9       	bld	r25, 7
 ad6:	08 95       	ret

00000ad8 <__fp_inf>:
 ad8:	97 f9       	bld	r25, 7
 ada:	9f 67       	ori	r25, 0x7F	; 127
 adc:	80 e8       	ldi	r24, 0x80	; 128
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	60 e0       	ldi	r22, 0x00	; 0
 ae2:	08 95       	ret

00000ae4 <__fp_nan>:
 ae4:	9f ef       	ldi	r25, 0xFF	; 255
 ae6:	80 ec       	ldi	r24, 0xC0	; 192
 ae8:	08 95       	ret

00000aea <__fp_pscA>:
 aea:	00 24       	eor	r0, r0
 aec:	0a 94       	dec	r0
 aee:	16 16       	cp	r1, r22
 af0:	17 06       	cpc	r1, r23
 af2:	18 06       	cpc	r1, r24
 af4:	09 06       	cpc	r0, r25
 af6:	08 95       	ret

00000af8 <__fp_pscB>:
 af8:	00 24       	eor	r0, r0
 afa:	0a 94       	dec	r0
 afc:	12 16       	cp	r1, r18
 afe:	13 06       	cpc	r1, r19
 b00:	14 06       	cpc	r1, r20
 b02:	05 06       	cpc	r0, r21
 b04:	08 95       	ret

00000b06 <__fp_round>:
 b06:	09 2e       	mov	r0, r25
 b08:	03 94       	inc	r0
 b0a:	00 0c       	add	r0, r0
 b0c:	11 f4       	brne	.+4      	; 0xb12 <__fp_round+0xc>
 b0e:	88 23       	and	r24, r24
 b10:	52 f0       	brmi	.+20     	; 0xb26 <__fp_round+0x20>
 b12:	bb 0f       	add	r27, r27
 b14:	40 f4       	brcc	.+16     	; 0xb26 <__fp_round+0x20>
 b16:	bf 2b       	or	r27, r31
 b18:	11 f4       	brne	.+4      	; 0xb1e <__fp_round+0x18>
 b1a:	60 ff       	sbrs	r22, 0
 b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__fp_round+0x20>
 b1e:	6f 5f       	subi	r22, 0xFF	; 255
 b20:	7f 4f       	sbci	r23, 0xFF	; 255
 b22:	8f 4f       	sbci	r24, 0xFF	; 255
 b24:	9f 4f       	sbci	r25, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <__fp_split3>:
 b28:	57 fd       	sbrc	r21, 7
 b2a:	90 58       	subi	r25, 0x80	; 128
 b2c:	44 0f       	add	r20, r20
 b2e:	55 1f       	adc	r21, r21
 b30:	59 f0       	breq	.+22     	; 0xb48 <__fp_splitA+0x10>
 b32:	5f 3f       	cpi	r21, 0xFF	; 255
 b34:	71 f0       	breq	.+28     	; 0xb52 <__fp_splitA+0x1a>
 b36:	47 95       	ror	r20

00000b38 <__fp_splitA>:
 b38:	88 0f       	add	r24, r24
 b3a:	97 fb       	bst	r25, 7
 b3c:	99 1f       	adc	r25, r25
 b3e:	61 f0       	breq	.+24     	; 0xb58 <__fp_splitA+0x20>
 b40:	9f 3f       	cpi	r25, 0xFF	; 255
 b42:	79 f0       	breq	.+30     	; 0xb62 <__fp_splitA+0x2a>
 b44:	87 95       	ror	r24
 b46:	08 95       	ret
 b48:	12 16       	cp	r1, r18
 b4a:	13 06       	cpc	r1, r19
 b4c:	14 06       	cpc	r1, r20
 b4e:	55 1f       	adc	r21, r21
 b50:	f2 cf       	rjmp	.-28     	; 0xb36 <__fp_split3+0xe>
 b52:	46 95       	lsr	r20
 b54:	f1 df       	rcall	.-30     	; 0xb38 <__fp_splitA>
 b56:	08 c0       	rjmp	.+16     	; 0xb68 <__fp_splitA+0x30>
 b58:	16 16       	cp	r1, r22
 b5a:	17 06       	cpc	r1, r23
 b5c:	18 06       	cpc	r1, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	f1 cf       	rjmp	.-30     	; 0xb44 <__fp_splitA+0xc>
 b62:	86 95       	lsr	r24
 b64:	71 05       	cpc	r23, r1
 b66:	61 05       	cpc	r22, r1
 b68:	08 94       	sec
 b6a:	08 95       	ret

00000b6c <__fp_zero>:
 b6c:	e8 94       	clt

00000b6e <__fp_szero>:
 b6e:	bb 27       	eor	r27, r27
 b70:	66 27       	eor	r22, r22
 b72:	77 27       	eor	r23, r23
 b74:	cb 01       	movw	r24, r22
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret

00000b7a <__mulsf3>:
 b7a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3x>
 b7e:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
 b82:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
 b86:	38 f0       	brcs	.+14     	; 0xb96 <__mulsf3+0x1c>
 b88:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
 b8c:	20 f0       	brcs	.+8      	; 0xb96 <__mulsf3+0x1c>
 b8e:	95 23       	and	r25, r21
 b90:	11 f0       	breq	.+4      	; 0xb96 <__mulsf3+0x1c>
 b92:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 b96:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>
 b9a:	11 24       	eor	r1, r1
 b9c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>

00000ba0 <__mulsf3x>:
 ba0:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
 ba4:	70 f3       	brcs	.-36     	; 0xb82 <__mulsf3+0x8>

00000ba6 <__mulsf3_pse>:
 ba6:	95 9f       	mul	r25, r21
 ba8:	c1 f3       	breq	.-16     	; 0xb9a <__mulsf3+0x20>
 baa:	95 0f       	add	r25, r21
 bac:	50 e0       	ldi	r21, 0x00	; 0
 bae:	55 1f       	adc	r21, r21
 bb0:	62 9f       	mul	r22, r18
 bb2:	f0 01       	movw	r30, r0
 bb4:	72 9f       	mul	r23, r18
 bb6:	bb 27       	eor	r27, r27
 bb8:	f0 0d       	add	r31, r0
 bba:	b1 1d       	adc	r27, r1
 bbc:	63 9f       	mul	r22, r19
 bbe:	aa 27       	eor	r26, r26
 bc0:	f0 0d       	add	r31, r0
 bc2:	b1 1d       	adc	r27, r1
 bc4:	aa 1f       	adc	r26, r26
 bc6:	64 9f       	mul	r22, r20
 bc8:	66 27       	eor	r22, r22
 bca:	b0 0d       	add	r27, r0
 bcc:	a1 1d       	adc	r26, r1
 bce:	66 1f       	adc	r22, r22
 bd0:	82 9f       	mul	r24, r18
 bd2:	22 27       	eor	r18, r18
 bd4:	b0 0d       	add	r27, r0
 bd6:	a1 1d       	adc	r26, r1
 bd8:	62 1f       	adc	r22, r18
 bda:	73 9f       	mul	r23, r19
 bdc:	b0 0d       	add	r27, r0
 bde:	a1 1d       	adc	r26, r1
 be0:	62 1f       	adc	r22, r18
 be2:	83 9f       	mul	r24, r19
 be4:	a0 0d       	add	r26, r0
 be6:	61 1d       	adc	r22, r1
 be8:	22 1f       	adc	r18, r18
 bea:	74 9f       	mul	r23, r20
 bec:	33 27       	eor	r19, r19
 bee:	a0 0d       	add	r26, r0
 bf0:	61 1d       	adc	r22, r1
 bf2:	23 1f       	adc	r18, r19
 bf4:	84 9f       	mul	r24, r20
 bf6:	60 0d       	add	r22, r0
 bf8:	21 1d       	adc	r18, r1
 bfa:	82 2f       	mov	r24, r18
 bfc:	76 2f       	mov	r23, r22
 bfe:	6a 2f       	mov	r22, r26
 c00:	11 24       	eor	r1, r1
 c02:	9f 57       	subi	r25, 0x7F	; 127
 c04:	50 40       	sbci	r21, 0x00	; 0
 c06:	9a f0       	brmi	.+38     	; 0xc2e <__mulsf3_pse+0x88>
 c08:	f1 f0       	breq	.+60     	; 0xc46 <__mulsf3_pse+0xa0>
 c0a:	88 23       	and	r24, r24
 c0c:	4a f0       	brmi	.+18     	; 0xc20 <__mulsf3_pse+0x7a>
 c0e:	ee 0f       	add	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	bb 1f       	adc	r27, r27
 c14:	66 1f       	adc	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	91 50       	subi	r25, 0x01	; 1
 c1c:	50 40       	sbci	r21, 0x00	; 0
 c1e:	a9 f7       	brne	.-22     	; 0xc0a <__mulsf3_pse+0x64>
 c20:	9e 3f       	cpi	r25, 0xFE	; 254
 c22:	51 05       	cpc	r21, r1
 c24:	80 f0       	brcs	.+32     	; 0xc46 <__mulsf3_pse+0xa0>
 c26:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 c2a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 c2e:	5f 3f       	cpi	r21, 0xFF	; 255
 c30:	e4 f3       	brlt	.-8      	; 0xc2a <__mulsf3_pse+0x84>
 c32:	98 3e       	cpi	r25, 0xE8	; 232
 c34:	d4 f3       	brlt	.-12     	; 0xc2a <__mulsf3_pse+0x84>
 c36:	86 95       	lsr	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	b7 95       	ror	r27
 c3e:	f7 95       	ror	r31
 c40:	e7 95       	ror	r30
 c42:	9f 5f       	subi	r25, 0xFF	; 255
 c44:	c1 f7       	brne	.-16     	; 0xc36 <__mulsf3_pse+0x90>
 c46:	fe 2b       	or	r31, r30
 c48:	88 0f       	add	r24, r24
 c4a:	91 1d       	adc	r25, r1
 c4c:	96 95       	lsr	r25
 c4e:	87 95       	ror	r24
 c50:	97 f9       	bld	r25, 7
 c52:	08 95       	ret

00000c54 <__itoa_ncheck>:
 c54:	bb 27       	eor	r27, r27
 c56:	4a 30       	cpi	r20, 0x0A	; 10
 c58:	31 f4       	brne	.+12     	; 0xc66 <__itoa_ncheck+0x12>
 c5a:	99 23       	and	r25, r25
 c5c:	22 f4       	brpl	.+8      	; 0xc66 <__itoa_ncheck+0x12>
 c5e:	bd e2       	ldi	r27, 0x2D	; 45
 c60:	90 95       	com	r25
 c62:	81 95       	neg	r24
 c64:	9f 4f       	sbci	r25, 0xFF	; 255
 c66:	0c 94 67 06 	jmp	0xcce	; 0xcce <__utoa_common>

00000c6a <__ltoa_ncheck>:
 c6a:	bb 27       	eor	r27, r27
 c6c:	2a 30       	cpi	r18, 0x0A	; 10
 c6e:	51 f4       	brne	.+20     	; 0xc84 <__ltoa_ncheck+0x1a>
 c70:	99 23       	and	r25, r25
 c72:	42 f4       	brpl	.+16     	; 0xc84 <__ltoa_ncheck+0x1a>
 c74:	bd e2       	ldi	r27, 0x2D	; 45
 c76:	90 95       	com	r25
 c78:	80 95       	com	r24
 c7a:	70 95       	com	r23
 c7c:	61 95       	neg	r22
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__ultoa_common>

00000c88 <__ultoa_ncheck>:
 c88:	bb 27       	eor	r27, r27

00000c8a <__ultoa_common>:
 c8a:	fa 01       	movw	r30, r20
 c8c:	a6 2f       	mov	r26, r22
 c8e:	62 17       	cp	r22, r18
 c90:	71 05       	cpc	r23, r1
 c92:	81 05       	cpc	r24, r1
 c94:	91 05       	cpc	r25, r1
 c96:	33 0b       	sbc	r19, r19
 c98:	30 fb       	bst	r19, 0
 c9a:	66 f0       	brts	.+24     	; 0xcb4 <__ultoa_common+0x2a>
 c9c:	aa 27       	eor	r26, r26
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	99 1f       	adc	r25, r25
 ca6:	aa 1f       	adc	r26, r26
 ca8:	a2 17       	cp	r26, r18
 caa:	10 f0       	brcs	.+4      	; 0xcb0 <__ultoa_common+0x26>
 cac:	a2 1b       	sub	r26, r18
 cae:	63 95       	inc	r22
 cb0:	38 50       	subi	r19, 0x08	; 8
 cb2:	a9 f7       	brne	.-22     	; 0xc9e <__ultoa_common+0x14>
 cb4:	a0 5d       	subi	r26, 0xD0	; 208
 cb6:	aa 33       	cpi	r26, 0x3A	; 58
 cb8:	08 f0       	brcs	.+2      	; 0xcbc <__ultoa_common+0x32>
 cba:	a9 5d       	subi	r26, 0xD9	; 217
 cbc:	a1 93       	st	Z+, r26
 cbe:	36 f7       	brtc	.-52     	; 0xc8c <__ultoa_common+0x2>
 cc0:	b1 11       	cpse	r27, r1
 cc2:	b1 93       	st	Z+, r27
 cc4:	10 82       	st	Z, r1
 cc6:	ca 01       	movw	r24, r20
 cc8:	0c 94 80 06 	jmp	0xd00	; 0xd00 <strrev>

00000ccc <__utoa_ncheck>:
 ccc:	bb 27       	eor	r27, r27

00000cce <__utoa_common>:
 cce:	fb 01       	movw	r30, r22
 cd0:	55 27       	eor	r21, r21
 cd2:	aa 27       	eor	r26, r26
 cd4:	88 0f       	add	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	aa 1f       	adc	r26, r26
 cda:	a4 17       	cp	r26, r20
 cdc:	10 f0       	brcs	.+4      	; 0xce2 <__utoa_common+0x14>
 cde:	a4 1b       	sub	r26, r20
 ce0:	83 95       	inc	r24
 ce2:	50 51       	subi	r21, 0x10	; 16
 ce4:	b9 f7       	brne	.-18     	; 0xcd4 <__utoa_common+0x6>
 ce6:	a0 5d       	subi	r26, 0xD0	; 208
 ce8:	aa 33       	cpi	r26, 0x3A	; 58
 cea:	08 f0       	brcs	.+2      	; 0xcee <__utoa_common+0x20>
 cec:	a9 5d       	subi	r26, 0xD9	; 217
 cee:	a1 93       	st	Z+, r26
 cf0:	00 97       	sbiw	r24, 0x00	; 0
 cf2:	79 f7       	brne	.-34     	; 0xcd2 <__utoa_common+0x4>
 cf4:	b1 11       	cpse	r27, r1
 cf6:	b1 93       	st	Z+, r27
 cf8:	11 92       	st	Z+, r1
 cfa:	cb 01       	movw	r24, r22
 cfc:	0c 94 80 06 	jmp	0xd00	; 0xd00 <strrev>

00000d00 <strrev>:
 d00:	dc 01       	movw	r26, r24
 d02:	fc 01       	movw	r30, r24
 d04:	67 2f       	mov	r22, r23
 d06:	71 91       	ld	r23, Z+
 d08:	77 23       	and	r23, r23
 d0a:	e1 f7       	brne	.-8      	; 0xd04 <strrev+0x4>
 d0c:	32 97       	sbiw	r30, 0x02	; 2
 d0e:	04 c0       	rjmp	.+8      	; 0xd18 <strrev+0x18>
 d10:	7c 91       	ld	r23, X
 d12:	6d 93       	st	X+, r22
 d14:	70 83       	st	Z, r23
 d16:	62 91       	ld	r22, -Z
 d18:	ae 17       	cp	r26, r30
 d1a:	bf 07       	cpc	r27, r31
 d1c:	c8 f3       	brcs	.-14     	; 0xd10 <strrev+0x10>
 d1e:	08 95       	ret

00000d20 <_exit>:
 d20:	f8 94       	cli

00000d22 <__stop_program>:
 d22:	ff cf       	rjmp	.-2      	; 0xd22 <__stop_program>
